name: 🔧 Build OpenSSL

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  OPENSSL_VERSION: 3.5.0

jobs:
  build-openssl:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            compiler: universal
            triplet: universal
            make: make

          - os: ubuntu-latest
            compiler: mingw
            triplet: mingw64
            make: make

          - os: windows-latest
            compiler: msvc
            triplet: VC-WIN64A
            make: nmake

    steps:
      - name: 📥 Checkout source
        uses: actions/checkout@v3

      - name: 🧰 Install Perl modules (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -L https://cpanmin.us | perl - --notest -l "$HOME/perl5" App::cpanminus
          export PATH="$HOME/perl5/bin:$PATH"
          export PERL5LIB="$HOME/perl5/lib/perl5"
          cpanm IPC::Cmd Params::Check Locale::Maketext::Simple

      - name: 🧰 Install MinGW (Ubuntu)
        if: matrix.compiler == 'mingw'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            curl \
            perl \
            make \
            gcc-mingw-w64-x86-64 \
            g++-mingw-w64-x86-64 \
            pkg-config

      - name: 🧰 Install NASM (Windows)
        if: matrix.compiler == 'msvc'
        shell: pwsh
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: 🛠️ Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: 🍎 Build OpenSSL (macOS Universal)
        if: matrix.compiler == 'universal'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          mkdir -p build-x86_64 build-arm64
          for arch in x86_64 arm64; do
            mkdir -p build-$arch
            cp -R . build-$arch/src
            pushd build-$arch/src
            perl Configure darwin64-${arch}-cc no-shared --prefix="${{ github.workspace }}/openssl-universal-$arch"
            make -j$(sysctl -n hw.logicalcpu)
            make install_sw
            popd
          done

          mkdir -p "${{ github.workspace }}/openssl-out/lib"
          mkdir -p "${{ github.workspace }}/openssl-out/include"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libssl.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libssl.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libssl.a"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libcrypto.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libcrypto.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libcrypto.a"

          cp -R "${{ github.workspace }}/openssl-universal-x86_64/include" "${{ github.workspace }}/openssl-out/"

      - name: 🐧 Build OpenSSL (MinGW Cross)
        if: matrix.compiler == 'mingw'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          export CC=x86_64-w64-mingw32-gcc
          export AR=x86_64-w64-mingw32-ar
          export RANLIB=x86_64-w64-mingw32-ranlib
          export WINDRES=x86_64-w64-mingw32-windres

          ./Configure mingw64 no-shared --prefix="${{ github.workspace }}/openssl-out"
          make -j$(nproc)
          make install

      - name: 🧊 Build OpenSSL (MSVC)
        if: matrix.compiler == 'msvc'
        shell: cmd
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}
      
          perl Configure ${{ matrix.triplet }} no-shared --prefix=%GITHUB_WORKSPACE%\openssl-out
          nmake
          nmake install

      - name: 🖋️ Add OpenSSL license to output (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-WebRequest https://openssl-library.org/source/license/apache-license-2.0.txt -OutFile "${env:GITHUB_WORKSPACE}\openssl-out\LICENSE-OpenSSL.txt"

      - name: 🖋️ Add OpenSSL license to output (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          curl -sSL https://openssl-library.org/source/license/apache-license-2.0.txt -o "${{ github.workspace }}/openssl-out/LICENSE-OpenSSL.txt"

      - name: 📦 Compress OpenSSL output (Unix)
        shell: bash
        if: runner.os != 'Windows'
        run: |
          zip -r openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}.zip openssl-out
      
      - name: 📦 Compress OpenSSL output (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path openssl-out\* `
                           -DestinationPath "openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}.zip"
           
      - name: 📦 Upload OpenSSL artifact
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}.zip

  upload:
    name: 🗂️ Create release and upload artifacts
    needs:
      - build-openssl
    runs-on: ubuntu-latest

    env:
      RELEASE_TAG: 3.5.0

    steps:
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: 🗑️ Delete previous release and tag if exists
        run: |
          if gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" &>/dev/null; then
            echo "Release '$RELEASE_TAG' exists. Deleting..."
            gh release delete "$RELEASE_TAG" --cleanup-tag --yes --repo "$GITHUB_REPOSITORY" || echo "Failed to delete release. Ignoring."
          else
            echo "No release named '$RELEASE_TAG' found. Skipping delete."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 Generate SHA256 checksums and file sizes
        run: |
          echo "| File | Size | SHA256 Checksum |" > release-body.md
          echo "|------|------|-----------------|" >> release-body.md

          find ./artifacts -type f -name "*.zip" | sort | while read -r file; do
            hash=$(sha256sum "$file" | awk '{print $1}')
            size=$(du -h "$file" | cut -f1)
            filename=$(basename "$file")
            echo "| \`$filename\` | $size | \`$hash\` |"
          done >> release-body.md

      - name: 🚀 Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          prerelease: false
          allowUpdates: true
          replacesArtifacts: true
          name: "OpenSSL ${{ env.OPENSSL_VERSION }}"
          artifacts: artifacts/**/*
          bodyFile: release-body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
