name: Build OpenSSL

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  OPENSSL_VERSION: 3.5.0

jobs:
  build-openssl:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            compiler: universal
            triplet: universal
            make: make

          - os: ubuntu-latest
            compiler: mingw
            triplet: mingw64
            make: make

          # - os: windows-latest
          #   compiler: msvc
          #   triplet: VC-WIN64A
          #   make: nmake

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install Perl modules (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          curl -L https://cpanmin.us | perl - --notest -l "$HOME/perl5" App::cpanminus
          export PATH="$HOME/perl5/bin:$PATH"
          export PERL5LIB="$HOME/perl5/lib/perl5"
          cpanm IPC::Cmd Params::Check Locale::Maketext::Simple

      - name: Install MinGW (Ubuntu)
        if: matrix.compiler == 'mingw'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mingw-w64 \
            curl \
            perl \
            make \
            gcc-mingw-w64-x86-64 \
            g++-mingw-w64-x86-64 \
            pkg-config

      - name: Build OpenSSL (macOS)
        if: matrix.compiler == 'universal'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          mkdir -p build-x86_64 build-arm64
          for arch in x86_64 arm64; do
            mkdir -p build-$arch
            cp -R . build-$arch/src
            pushd build-$arch/src
            perl Configure darwin64-${arch}-cc no-shared --prefix="${{ github.workspace }}/openssl-universal-$arch"
            make -j$(sysctl -n hw.logicalcpu)
            make install_sw
            popd
          done

          mkdir -p "${{ github.workspace }}/openssl-out/lib"
          mkdir -p "${{ github.workspace }}/openssl-out/include"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libssl.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libssl.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libssl.a"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libcrypto.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libcrypto.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libcrypto.a"

          cp -R "${{ github.workspace }}/openssl-universal-x86_64/include" "${{ github.workspace }}/openssl-out/"

      - name: Build OpenSSL (MinGW Cross)
        if: matrix.compiler == 'mingw'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          export CC=x86_64-w64-mingw32-gcc
          export AR=x86_64-w64-mingw32-ar
          export RANLIB=x86_64-w64-mingw32-ranlib
          export WINDRES=x86_64-w64-mingw32-windres

          ./Configure mingw64 no-shared --cross-compile-prefix=x86_64-w64-mingw32- --prefix="${{ github.workspace }}/openssl-out"
          make -j$(nproc)
          make install

      - name: Upload OpenSSL artifact
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: openssl-out
