name: Build OpenSSL

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  OPENSSL_VERSION: 3.0.16

jobs:
  build-openssl:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            compiler: universal
            triplet: universal
            make: make

          #- os: windows-latest
          #  compiler: mingw
          #  triplet: mingw64
          #  make: mingw32-make

          #- os: windows-latest
          #  compiler: msvc
          #  triplet: VC-WIN64A
          #  make: nmake

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      # ---------------------- Windows Perl + Modules --------------------------
      - name: Install Perl (Chocolatey)
        if: runner.os == 'Windows'
        run: choco install strawberryperl -y
        shell: powershell

      - name: Install NASM
        if: runner.os == 'Windows'
        run: choco install nasm -y
        shell: powershell

      - name: Install Perl modules (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          perl -MCPAN -e "install App::cpanminus"
          $cpanm = Get-Command cpanm | Select-Object -ExpandProperty Source
          & $cpanm --notest IPC::Cmd Params::Check Locale::Maketext::Simple

      - name: Set Perl env path (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $perlPath = (where.exe perl)[0]
          echo "PERL=$perlPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "OPENSSL_SRC_PERL=$perlPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup MSVC environment
        if: matrix.compiler == 'msvc'
        uses: ilammy/msvc-dev-cmd@v1

      # ---------------------- macOS Perl Modules --------------------
      - name: Install Perl modules (macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          curl -L https://cpanmin.us | perl - --notest -l "$HOME/perl5" App::cpanminus
          export PATH="$HOME/perl5/bin:$PATH"
          export PERL5LIB="$HOME/perl5/lib/perl5"
          cpanm IPC::Cmd Params::Check Locale::Maketext::Simple

      # ---------------------- Build: macOS --------------------------
      - name: Build OpenSSL (macOS)
        if: matrix.compiler == 'universal'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          mkdir -p build-x86_64 build-arm64
          for arch in x86_64 arm64; do
            mkdir -p build-$arch
            cp -R . build-$arch/src
            pushd build-$arch/src
            perl Configure darwin64-${arch}-cc no-shared --prefix="${{ github.workspace }}/openssl-universal-$arch"
            make -j$(sysctl -n hw.logicalcpu)
            make install_sw
            popd
          done

          mkdir -p "${{ github.workspace }}/openssl-out/lib"
          mkdir -p "${{ github.workspace }}/openssl-out/include"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libssl.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libssl.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libssl.a"

          lipo -create \
            "${{ github.workspace }}/openssl-universal-x86_64/lib/libcrypto.a" \
            "${{ github.workspace }}/openssl-universal-arm64/lib/libcrypto.a" \
            -output "${{ github.workspace }}/openssl-out/lib/libcrypto.a"

          cp -R "${{ github.workspace }}/openssl-universal-x86_64/include" "${{ github.workspace }}/openssl-out/"

      # ---------------------- Build: Windows (MSVC) --------------------------
      - name: Build OpenSSL (Windows MSVC)
        if: matrix.compiler == 'msvc'
        shell: powershell
        run: |
          Invoke-WebRequest https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz -OutFile openssl.tar.gz
          tar -xf openssl.tar.gz
          Set-Location openssl-${{ env.OPENSSL_VERSION }}

          perl Configure ${{ matrix.triplet }} no-shared --prefix="${{ github.workspace }}\openssl-out"
          & ${{ matrix.make }} install_dev

      # ---------------------- Build: Windows (MinGW) --------------------------
      - name: Build OpenSSL (Windows MinGW)
        if: matrix.compiler == 'mingw'
        shell: bash
        run: |
          curl -LO https://www.openssl.org/source/openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          tar -xf openssl-${{ env.OPENSSL_VERSION }}.tar.gz
          cd openssl-${{ env.OPENSSL_VERSION }}

          perl Configure ${{ matrix.triplet }} no-shared --prefix="${{ github.workspace }}/openssl-out"
          ${{ matrix.make }} -j4
          ${{ matrix.make }} install

      # ---------------------- Upload Artifact --------------------------
      - name: Upload OpenSSL artifact
        uses: actions/upload-artifact@v4
        with:
          name: openssl-${{ env.OPENSSL_VERSION }}-${{ matrix.os }}-${{ matrix.compiler }}
          path: openssl-out
